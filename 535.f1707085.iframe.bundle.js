"use strict";(self.webpackChunkzero_height=self.webpackChunkzero_height||[]).push([[535],{"./src/library/public-api.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{fV:()=>DetailSliderModule,kW:()=>DropdownModule,UU:()=>PopoverModule,U$:()=>TableModule});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs");let HandleEnterDirective=class HandleEnterDirective{constructor(element){this.element=element}onKeyDown(){this.element.nativeElement.setAttribute("aria-pressed",!0)}onKeyUp(){this.element.nativeElement.setAttribute("aria-pressed",!1)}static#_=this.ctorParameters=()=>[{type:core.ElementRef}];static#_2=this.propDecorators={onKeyDown:[{type:core.HostListener,args:["keydown.Enter"]}],onKeyUp:[{type:core.HostListener,args:["keyup.Enter"]},{type:core.HostListener,args:["blur"]}]}};HandleEnterDirective=(0,tslib_es6.gn)([(0,core.Directive)({selector:"[bnotkHandleEnter]"})],HandleEnterDirective);let ButtonModule=class ButtonModule{};ButtonModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[HandleEnterDirective],imports:[common.CommonModule],exports:[HandleEnterDirective]})],ButtonModule);let DetailSliderContentComponent=class DetailSliderContentComponent{};DetailSliderContentComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"bnotk-detail-slider-content",template:'<div class="detail-slider__body">\r\n  <div>\r\n    <ng-content></ng-content>\r\n  </div>\r\n</div>\r\n'})],DetailSliderContentComponent);let DetailSliderHeaderComponent=class DetailSliderHeaderComponent{constructor(){this.headerTitle="",this.detailSliderCloseAriaLabel="",this.toolTipDetailSliderClose="",this.closeButtonClick=new core.EventEmitter}static#_=this.propDecorators={headerTitle:[{type:core.Input}],detailSliderCloseAriaLabel:[{type:core.Input}],toolTipDetailSliderClose:[{type:core.Input}],closeButtonClick:[{type:core.Output}]}};DetailSliderHeaderComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"bnotk-detail-slider-header",template:'<div class="detail-slider__header">\r\n  <button\r\n    bnotkHandleEnter\r\n    (click)="closeButtonClick.emit()"\r\n    class="detail-slider__header-close-btn"\r\n    role="button"\r\n  >\r\n    <i>close</i>\r\n  </button>\r\n  <div class="detail-slider__header-content" *ngIf="headerTitle">\r\n    <h2>{{ headerTitle }}</h2>\r\n  </div>\r\n  <ng-content></ng-content>\r\n</div>\r\n'})],DetailSliderHeaderComponent);let DetailSliderComponent=class DetailSliderComponent{constructor(elementRef){this.elementRef=elementRef,this.outsideClick=new core.EventEmitter}onClick(event){const element=event.target;!element.classList.contains("detail-slider__protected-backdrop")&&this.elementRef.nativeElement.contains(element)||this.outsideClick.emit(event)}static#_=this.ctorParameters=()=>[{type:core.ElementRef}];static#_2=this.propDecorators={outsideClick:[{type:core.Output}],open:[{type:core.Input}],protectedBackdrop:[{type:core.Input}],onClick:[{type:core.HostListener,args:["document:mousedown",["$event"]]}]}};DetailSliderComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"bnotk-detail-slider",template:'<div class="detail-slider__protected-backdrop" *ngIf="protectedBackdrop"></div>\r\n<div class="detail-slider" cdkTrapFocus cdkTrapFocusAutoCapture>\r\n  <ng-content></ng-content>\r\n</div>\r\n'})],DetailSliderComponent);let DetailSliderModule=class DetailSliderModule{};DetailSliderModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[DetailSliderComponent,DetailSliderHeaderComponent,DetailSliderContentComponent],imports:[common.CommonModule,ButtonModule],exports:[DetailSliderComponent,DetailSliderHeaderComponent,DetailSliderContentComponent]})],DetailSliderModule);var ng_select_ng_select=__webpack_require__("./node_modules/@ng-select/ng-select/fesm2022/ng-select-ng-select.mjs");const DROPDOWN_DIRECTIVES=[];let DropdownModule=class DropdownModule{constructor(config){this.config=config,this.config.placeholder="",this.config.notFoundText="notFoundText",this.config.clearAllText="clearAllText",this.config.loadingText="loadingText"}static#_=this.ctorParameters=()=>[{type:ng_select_ng_select.$q}]};DropdownModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:DROPDOWN_DIRECTIVES,exports:[...DROPDOWN_DIRECTIVES,ng_select_ng_select.A0],imports:[common.CommonModule,ng_select_ng_select.A0],providers:[ng_select_ng_select.$q]})],DropdownModule);var ng_bootstrap=__webpack_require__("./node_modules/@ng-bootstrap/ng-bootstrap/fesm2022/ng-bootstrap.mjs");const POPOVER_DIRECTIVES=[];let PopoverModule=class PopoverModule{};PopoverModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:POPOVER_DIRECTIVES,imports:[common.CommonModule,ng_bootstrap.dT,ng_select_ng_select.A0],exports:[...POPOVER_DIRECTIVES,ng_bootstrap.dT]})],PopoverModule);var fesm2022_forms=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs"),ag_grid_angular=__webpack_require__("./node_modules/ag-grid-angular/fesm2020/ag-grid-angular.mjs");let HeaderConfigMixinComponent=class HeaderConfigMixinComponent{handleSettingsArrowRightKeydown(event){event.preventDefault();const tabKeyDownEvent=new KeyboardEvent("keydown",{key:"Tab",shiftKey:!1,bubbles:!0,cancelable:!0});this.params.eGridHeader.dispatchEvent(tabKeyDownEvent)}agInit(headerParams){this.params=headerParams,this.defaultColumns=this.params?.context?.settingsColConfig?.defaultColumns,headerParams.eGridHeader.addEventListener("focusin",this.setFocusInOnSettingsButton.bind(this)),this.params.api.addEventListener("gridSizeChanged",(event=>{this.gridHeight=event.clientHeight,this.adjustPopoverSize()}))}setFocusInOnSettingsButton(){this.settingsButton.nativeElement.focus()}isColVisibleInConfig(column){return"bnotk-colid-configuration"!==column.getColId()&&"bnotk-colid-checkbox"!==column.getColId()&&(column.getColDef().headerName||column.getColDef().field)&&!this.isColHiddenInConfig(column)}isColHiddenInConfig(column){return!!this.params?.context?.settingsColConfig?.hiddenColsInConfig&&this.params?.context?.settingsColConfig?.hiddenColsInConfig?.indexOf(column.getColDef().field)>-1}isDefaultColumn(field){return this.defaultColumns?.includes(field)}refresh(){return!1}adjustPopoverSize(){setTimeout((()=>{const popoverContent=document.getElementById("popoverContentId");if(!popoverContent||!this.gridHeight)return;let availableSpace=this.gridHeight-20-40;availableSpace=availableSpace<240?240:availableSpace,popoverContent.style.maxHeight=`${availableSpace}px`}),0)}static#_=this.propDecorators={settingsButton:[{type:core.ViewChild,args:["settingsButton"]}],handleSettingsArrowRightKeydown:[{type:core.HostListener,args:["keydown.arrowRight",["$event"]]}]}};HeaderConfigMixinComponent=(0,tslib_es6.gn)([(0,core.Component)({template:""})],HeaderConfigMixinComponent);var Subject=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Subject.js");let ClearFilterComponent=class ClearFilterComponent{handleEscapeKeyEvent(event){this.handleEnterKey(event)}constructor(elementRef){this.elementRef=elementRef}agInit(params){this.gridApi=params.api,this.gridApi.addEventListener("filterChanged",(()=>{this.isAnyFilterPresent=this.gridApi.isAnyFilterPresent(),this.isAnyFilterPresent?this.parentHeaderCell.classList.remove("filterBtnDisabled"):this.parentHeaderCell.classList.add("filterBtnDisabled")})),this.gridApi.addEventListener("gridReady",(()=>{this.parentHeaderCell=this.elementRef.nativeElement.closest(".ag-header-cell"),this.parentHeaderCell.classList.add("filterBtnDisabled")}))}handleEnterKey(event){if(event.target.contains(this.elementRef.nativeElement)){this.resetAllFilters();const shiftTabKeyDownEvent=new KeyboardEvent("keydown",{key:"Tab",shiftKey:!0,bubbles:!0,cancelable:!0});this.parentHeaderCell.dispatchEvent(shiftTabKeyDownEvent)}}onParentModelChanged(){}resetAllFilters(){this.gridApi.onFilterChanged(),this.gridApi.setFilterModel(null),BnotkTableTheme.restAllFilters()}static#_=this.ctorParameters=()=>[{type:core.ElementRef}];static#_2=this.propDecorators={resetFilterButton:[{type:core.ViewChild,args:["resetFilterButton"]}],handleEscapeKeyEvent:[{type:core.HostListener,args:["document:keydown.enter",["$event"]]}]}};ClearFilterComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"bnotk-clear-filter",template:'<button\r\n  bnotkHandleEnter\r\n  (click)="resetAllFilters()"\r\n  [disabled]="!isAnyFilterPresent"\r\n  class="button--link"\r\n  #resetFilterButton\r\n>\r\n  icon\r\n</button>\r\n'})],ClearFilterComponent);let HeaderConfigComponent=class HeaderConfigComponent extends HeaderConfigMixinComponent{constructor(){super(...arguments),this.didApplySettings=!1,this.currentChanges=[]}renderColumns(){this.columnList=this.params.api.getColumns().filter((column=>"bnotk-colid-configuration"!==column.getColId()&&"bnotk-colid-checkbox"!==column.getColId())).map((column=>({colId:column.getColId(),visible:column.isVisible(),field:column.getColDef().field,headerName:column.getColDef().headerName})))}onPopoverClose(){this.didApplySettings||(this.params.api.getAllGridColumns().forEach((column=>{const field=column.getColDef().field;field&&this.params.api.setColumnVisible(field,this.initialColumnVisibility[column.getColId()])})),this.params.api.sizeColumnsToFit()),this.didApplySettings=!1,this.setFocusInOnSettingsButton()}applySettings(){for(this.didApplySettings=!0;this.currentChanges.length>0;)this.params.api.sizeColumnsToFit(),this.currentChanges.pop();this.popover.close()}setColumnVisible(field,visible){let changedColumn=this.currentChanges.find((c=>c.field===field));changedColumn=changedColumn?Object.assign(changedColumn,{visible}):{field,visible},this.currentChanges.push(changedColumn),this.params.api.setColumnVisible(field,visible),this.params.api.sizeColumnsToFit()}resetSettings(){for(this.popover.close();this.currentChanges.length>0;)this.currentChanges.pop();this.params.api.resetColumnState(),this.renderColumns(),this.setFocusInOnSettingsButton(),this.params.api.sizeColumnsToFit(),BnotkTableTheme.columnVisibilityReset()}openPopover(){this.params.api.getAllGridColumns().forEach((column=>{this.initialColumnVisibility[column.getColId()]=column.isVisible()})),this.renderColumns(),this.popover.open(),this.verifyInvalidDefaultColumns(),this.adjustPopoverSize()}verifyInvalidDefaultColumns(){if(this.defaultColumns?.length){const differenceList=[];if(this.defaultColumns.forEach((col=>{-1===this.columnList.map((e=>e.field)).indexOf(col)&&differenceList.push(col)})),differenceList.length)throw new Error(`Default columns: [${differenceList.join(", ")}] are not available in columns list.`)}}static#_=this.propDecorators={settingsButton:[{type:core.ViewChild,args:["settingsButton"]}],popover:[{type:core.ViewChild,args:["p"]}],headerConfigTitle:[{type:core.Input}],standardFilter:[{type:core.Input}],resetFilter:[{type:core.Input}]}};HeaderConfigComponent=(0,tslib_es6.gn)([(0,core.Component)({template:'<button\r\n  bnotkHandleEnter\r\n  #settingsButton\r\n  autoClose="outside"\r\n  class="table__popover-controller"\r\n  popoverClass="table__popover"\r\n  (hidden)="onPopoverClose()"\r\n  placement="bottom-end"\r\n  container="body"\r\n  triggers="manual"\r\n  (click)="openPopover()"\r\n>\r\n  <i> name="settings" ></i>\r\n</button>\r\n\r\n<ng-template #popoverContent>\r\n  <div\r\n    id="popoverContentId"\r\n    class="popover--checkbox-only"\r\n    cdkTrapFocus\r\n    cdkTrapFocusAutoCapture\r\n  >\r\n    <div class="popover__buttons">\r\n      <button\r\n        bnotkHandleEnter\r\n        class="button--secondary button--small"\r\n        (click)="resetSettings()"\r\n      >\r\n        {{ standardFilter ? standardFilter : "standardFilter" }}\r\n      </button>\r\n      <button\r\n        bnotkHandleEnter\r\n        class="button--primary button--small"\r\n        (click)="applySettings()"\r\n      >\r\n        {{ standardFilter ? standardFilter : "applyText" }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n'})],HeaderConfigComponent);const DEFAULT_AGGRID_OPTIONS={headerHeight:47,floatingFiltersHeight:48,rowHeight:48,unSortIcon:!0};var ThemeClass;!function(ThemeClass){ThemeClass.DEFAULT="table",ThemeClass.WITH_CHECKBOXES="table--checkboxes",ThemeClass.WITH_FLOATING_FILTERS="table--floating-filters",ThemeClass.WITH_SETTINGS="table--settings",ThemeClass.WITH_EXPANDABLE_ROWS="table--expandable-rows",ThemeClass.WITH_SELECTABLE_ROWS="table--selectable-rows",ThemeClass.WITH_SORTING_ICONS="table--sorting-icons",ThemeClass.WITH_DETAIL_SLIDER="table--detail-slider",ThemeClass.CHECKBOX_CELL_CLASS="table--checkboxes__checkbox-column",ThemeClass.CHECKBOX_HEADER_CELL_CLASS="table--checkboxes__header-column",ThemeClass.SETTINGS_HEADER_CELL_CLASS="table--settings__pinned-header",ThemeClass.SETTINGS_CELL_CLASS="table--settings__pinned-body",ThemeClass.WITH_OVERLAY_NO_ROWS_CLASS="table--zero-results",ThemeClass.WITH_CONTEXT_MENU_CLASS="ag-theme-bnotk__cell-with-context-menu"}(ThemeClass||(ThemeClass={}));var HeaderConfigTypes;!function(HeaderConfigTypes){HeaderConfigTypes[HeaderConfigTypes.NO_HEADER_CONFIG=0]="NO_HEADER_CONFIG",HeaderConfigTypes[HeaderConfigTypes.DEFAULT_HEADER_CONFIG=1]="DEFAULT_HEADER_CONFIG",HeaderConfigTypes[HeaderConfigTypes.ACCESSIBLE_HEADER_CONFIG=2]="ACCESSIBLE_HEADER_CONFIG"}(HeaderConfigTypes||(HeaderConfigTypes={}));class BnotkTableTheme{static#_=this.gridSizeChanged=new Subject.x;static#_2=this.reset=new Subject.x;static#_3=this.resetVisibility=new Subject.x;static#_4=this.floatingFilterPresent=!1;static set themeOptions(themeOptions){BnotkTableTheme._themeOptions=themeOptions}static get themeOptions(){return BnotkTableTheme._themeOptions}static getConfig(themeOptions,agGridOptions){BnotkTableTheme.verifyAgGridOptions(agGridOptions),BnotkTableTheme.verifyThemeOptions(themeOptions,agGridOptions),BnotkTableTheme.themeOptions=themeOptions,agGridOptions.onGridSizeChanged=$event=>(this.gridSizeChanged.next($event),$event);let updatedAgGridOptions=BnotkTableTheme.updateDefaultColDef(themeOptions,agGridOptions);updatedAgGridOptions=BnotkTableTheme.updateColDef(themeOptions,updatedAgGridOptions),BnotkTableTheme.hasExpandableRows(agGridOptions)&&"infinite"!==agGridOptions.rowModelType&&BnotkTableTheme.setExpandableRowFeature(updatedAgGridOptions),this.setKeyNavigableRowFeature(updatedAgGridOptions);const styles=BnotkTableTheme.gridStyles(themeOptions,agGridOptions);return BnotkTableTheme.hasFloatingFilters(agGridOptions)&&BnotkTableTheme.setPlaceholder(updatedAgGridOptions),[{...updatedAgGridOptions,...DEFAULT_AGGRID_OPTIONS},styles]}static verifyAgGridOptions(agGridOptions){agGridOptions&&Object.keys(DEFAULT_AGGRID_OPTIONS).forEach((property=>{if(Object.prototype.hasOwnProperty.call(agGridOptions,property))throw new Error(`Overwriting ag grid property ${property} is not allowed since it is set by the default theme.`)}))}static verifyThemeOptions(themeOptions,agGridOptions){if(agGridOptions.defaultColDef){if(themeOptions.sortable&&(agGridOptions.defaultColDef.sortable||agGridOptions.defaultColDef.sortingOrder))throw new Error("Invalid config. If you set the theme option 'sortable', you are not allowed to change defaultColDef.sortable or defaultColDef.sortingOrder");if(themeOptions.headerSelection&&(agGridOptions.defaultColDef.headerCheckboxSelection||agGridOptions.defaultColDef.headerCheckboxSelectionFilteredOnly))throw new Error("Invalid config. If you set the theme option 'headerSelection', you are not allowed to change defaultColDef.headerCheckboxSelection or defaultColDef.headerCheckboxSelectionFilteredOnly")}}static getRowElementById(rowId){return document.querySelector(`div[row-id='${rowId}']`)}static getAllRowElementsByRowIndex(rowIndex){return document.querySelectorAll(`div[row-index='${rowIndex}']`)}static isDetailRow(rowId){let isDetailRow=!1;return this.getAllRowElementsByRowIndex(rowId).forEach((row=>{row.classList.contains("ag-row-level-1")&&(isDetailRow=!0)})),isDetailRow}static setKeyNavigableRowFeature(agGridOptions){agGridOptions.tabToNextCell||(agGridOptions.tabToNextCell=this.tabToNextCell),agGridOptions.navigateToNextCell||(agGridOptions.navigateToNextCell=this.navigateToNextCell)}static setExpandableRowFeature(agGridOptions){let gridApi;agGridOptions.isFullWidthRow=params=>params.rowNode.detail;const cellFocusedCallback=agGridOptions.onCellFocused;agGridOptions.onCellFocused=cellFocused=>{cellFocusedCallback&&cellFocusedCallback(cellFocused)};const rowClickCallback=agGridOptions.onRowClicked;agGridOptions.onRowClicked=clickEvent=>{const rowNode=clickEvent.node;if(!rowNode.detail)if(clickEvent.node.expanded)rowNode.setExpanded(!1);else{const currentRowIndex=clickEvent.rowIndex;rowNode.setExpanded(!0);let intervalCount=0;const intervalRowId=setInterval((()=>{if(++intervalCount,rowNode.detailNode&&rowNode.detailNode.id){const height=this.getRowElementById(rowNode.detailNode.id).scrollHeight;rowNode.detailNode.setRowHeight(height),gridApi.onRowHeightChanged(),clearInterval(intervalRowId)}20===intervalCount&&clearInterval(intervalRowId)}),5);gridApi.forEachNode((node=>{node.rowIndex!==currentRowIndex&&node.setExpanded(!1)}))}rowClickCallback&&rowClickCallback(clickEvent),BnotkTableTheme.setFocusOnRowAfterToggle(clickEvent)};const gridReadyCallback=agGridOptions.onGridReady;agGridOptions.onGridReady=event=>{gridApi=event.api,gridReadyCallback&&gridReadyCallback(event)};const firstDataRenderedCallback=agGridOptions.onFirstDataRendered;agGridOptions.onFirstDataRendered=params=>{params.api.forEachNode((node=>{node.master=!0})),firstDataRenderedCallback&&firstDataRenderedCallback(params)}}static setFocusOnRowAfterToggle($event){setTimeout((()=>{let expandedRowIndex=-1;$event.api.forEachNode((node=>{expandedRowIndex=node.expanded?node.rowIndex:expandedRowIndex}));const rowIndex=expandedRowIndex>-1?expandedRowIndex:$event.rowIndex;$event.api.setFocusedCell(rowIndex,"bnotk-colid-checkbox")}),20)}static setPlaceholder(agGridOptions){const gridReadyCallback=agGridOptions.onGridReady;agGridOptions.onGridReady=event=>{document.querySelectorAll(".ag-floating-filter-input .ag-text-field-input").forEach((element=>{element.setAttribute("placeholder","filterPlaceholder")})),gridReadyCallback&&gridReadyCallback(event)}}static updateDefaultColDef(themeOptions,agGridOptions){const updatedOptions={...agGridOptions};return themeOptions.sortable&&(updatedOptions.defaultColDef.sortable=!0,updatedOptions.defaultColDef.sortingOrder=["asc","desc"]),themeOptions.headerSelection&&(updatedOptions.defaultColDef.headerCheckboxSelection=params=>params.columnApi.getAllDisplayedColumns()[0]===params.column,updatedOptions.defaultColDef.headerCheckboxSelectionFilteredOnly=!0),updatedOptions.enableBrowserTooltips=!0,updatedOptions.defaultColDef.minWidth=128,updatedOptions}static updateColDef(themeOptions,agGridOptions){const updatedOptions={...agGridOptions};return themeOptions.selectableRows&&(updatedOptions.rowSelection=updatedOptions.rowSelection?updatedOptions.rowSelection:"multiple",updatedOptions.columnDefs.unshift(BnotkTableTheme.checkboxColDef())),themeOptions.withSettings!==HeaderConfigTypes.NO_HEADER_CONFIG&&updatedOptions.columnDefs.push(BnotkTableTheme.settingsColDef(agGridOptions.columnDefs.filter((col=>col.floatingFilter&&col.filter)).length>0,themeOptions.withSettings,themeOptions.cellRendererForSettingsColumn)),updatedOptions}static settingsColDef(withFloatingFilter,withSettings,cellRenderer){const colDef={cellClass:cellRenderer?ThemeClass.WITH_CONTEXT_MENU_CLASS:ThemeClass.SETTINGS_CELL_CLASS,headerClass:ThemeClass.SETTINGS_HEADER_CELL_CLASS,colId:"bnotk-colid-configuration",filter:!1,floatingFilter:!1,floatingFilterComponentFramework:ClearFilterComponent,headerComponentFramework:withSettings===HeaderConfigTypes.ACCESSIBLE_HEADER_CONFIG?AccessibleHeaderConfigComponent:HeaderConfigComponent,cellRenderer:cellRenderer||void 0,headerName:"",pinned:"right",resizable:!1,sortable:!1,suppressMovable:!0,lockPosition:!0,width:36,maxWidth:36};return withFloatingFilter?Object.assign(colDef,{filter:!0,floatingFilter:!0}):colDef}static checkboxColDef(){return{colId:"bnotk-colid-checkbox",headerName:"",sortable:!1,cellClass:ThemeClass.CHECKBOX_CELL_CLASS,headerClass:ThemeClass.CHECKBOX_HEADER_CELL_CLASS,suppressMovable:!0,lockPosition:!0,floatingFilter:!1,checkboxSelection:!0,pinned:"left",filter:!1,minWidth:34,maxWidth:34,width:34}}static gridStyles(themeOptions,agGridOptions){const styles=[ThemeClass.DEFAULT];return themeOptions.selectableRows&&styles.push(ThemeClass.WITH_CHECKBOXES),BnotkTableTheme.hasFloatingFilters(agGridOptions)&&styles.push(ThemeClass.WITH_FLOATING_FILTERS),themeOptions.withSettings&&styles.push(ThemeClass.WITH_SETTINGS),BnotkTableTheme.hasExpandableRows(agGridOptions)&&styles.push(ThemeClass.WITH_EXPANDABLE_ROWS),themeOptions.clickableRows&&styles.push(ThemeClass.WITH_SELECTABLE_ROWS),themeOptions.sortable&&styles.push(ThemeClass.WITH_SORTING_ICONS),themeOptions.withDetailSlider&&styles.push(ThemeClass.WITH_DETAIL_SLIDER),BnotkTableTheme.hasOverlayNoRowsTemplate(agGridOptions)&&styles.push(ThemeClass.WITH_OVERLAY_NO_ROWS_CLASS),styles}static hasFloatingFilters(agGridOptions){if(!agGridOptions)return!1;let i=0;return agGridOptions.columnDefs.forEach((column=>{column.floatingFilter&&i++})),this.floatingFilterPresent=i>0,i>0}static hasExpandableRows(agGridOptions){return!(!agGridOptions||!agGridOptions.fullWidthCellRenderer)}static hasOverlayNoRowsTemplate(agGridOptions){return!!agGridOptions?.overlayNoRowsTemplate}static tabToNextCell(params){return params.backwards?BnotkTableTheme.navigateUp(params):BnotkTableTheme.navigateDown(params)}static isStartOrEndOfTable(gridApi,nextRowIndex){const renderedRowCount=gridApi?.getModel()?.getRowCount();return!gridApi||(nextRowIndex<0||nextRowIndex>=renderedRowCount)}static navigateToNextCell(params){switch(params.key){case"ArrowUp":return BnotkTableTheme.selectRowOnShiftArrow(params),BnotkTableTheme.navigateUp(params);case"ArrowDown":return BnotkTableTheme.selectRowOnShiftArrow(params),BnotkTableTheme.navigateDown(params);case"ArrowLeft":case"ArrowRight":return;default:throw new Error("this will never happen, navigation is always one of the 4 keys above")}}static navigateUp(params){const previousCell=params.previousCellPosition;let nextRowIndex;nextRowIndex=previousCell.rowIndex-1;const gridApi=params.api;if(BnotkTableTheme.isDetailRow(nextRowIndex)&&(nextRowIndex-=1),!BnotkTableTheme.isStartOrEndOfTable(gridApi,nextRowIndex))return{rowIndex:nextRowIndex,column:previousCell.column,rowPinned:void 0};!params.api.isAnyFilterPresent()&&this.floatingFilterPresent&&setTimeout((()=>{const shiftTabKeyDownEvent=new KeyboardEvent("keydown",{key:"Tab",shiftKey:!0,bubbles:!0,cancelable:!0});document.activeElement.dispatchEvent(shiftTabKeyDownEvent)}),0)}static navigateDown(params){const previousCell=params.previousCellPosition;let nextRowIndex;const gridApi=params.api;if(nextRowIndex=previousCell.rowIndex+1,BnotkTableTheme.isDetailRow(nextRowIndex)&&(nextRowIndex+=1),!BnotkTableTheme.isStartOrEndOfTable(gridApi,nextRowIndex))return{rowIndex:nextRowIndex,column:previousCell.column,rowPinned:void 0}}static selectRowOnShiftArrow(params){if(params.event.shiftKey&&BnotkTableTheme.themeOptions.multiselectWithShiftKey){const currentRowIndex=params.previousCellPosition.rowIndex,nextRowIndex="ArrowUp"===params.key?params.previousCellPosition.rowIndex-1:params.nextCellPosition.rowIndex,currentRowNode=params.api.getRenderedNodes().filter((rowNode=>rowNode.rowIndex===currentRowIndex))[0],nextRowNode=params.api.getRenderedNodes().filter((rowNode=>rowNode.rowIndex===nextRowIndex))[0];nextRowNode?.isSelected()&&currentRowNode?.isSelected()?currentRowNode?.setSelected(!1):nextRowNode?.isSelected()||currentRowNode?.isSelected()?nextRowNode?.setSelected(!nextRowNode.isSelected()):(currentRowNode?.setSelected(!0),nextRowNode?.setSelected(!0))}}static restAllFilters(){BnotkTableTheme.reset.next(void 0)}static clearAllFilters(){return BnotkTableTheme.reset.asObservable()}static columnVisibilityReset(){BnotkTableTheme.resetVisibility.next(void 0)}static visibilityReset(){return BnotkTableTheme.resetVisibility.asObservable()}}let AccessibleHeaderConfigComponent=class AccessibleHeaderConfigComponent extends HeaderConfigMixinComponent{constructor(){super(...arguments),this.colVisibilityChanges=[],this.isSettingsApplied=!1,this.visbilityMap={},this.isResetted=!1,this.sizingColumn=[],this.selectedSizeColumn={},this.rowAnimationDuration=300,this.isMovingRow=!1}agInit(headerParams){super.agInit(headerParams),this.sizingColumn=["S","M","L"]}renderColumns(){this.columnList=this.params.api.getAllGridColumns().filter((column=>this.isColVisibleInConfig(column))).map((column=>({colId:column.getColId(),visible:column.isVisible(),field:column.getColDef().field,headerName:column.getColDef().headerName})))}openPopover(){this.renderColumns(),this.columnsWhileOpening=[],this.params.api.getAllGridColumns().forEach((column=>{this.visbilityMap[column.getColDef().field]=column.isVisible(),this.columnsWhileOpening.push(column)})),this.renderColumns(),this.setSelectedSize(),this.verifyInvalidDefaultColumns(),this.popover.open(),this.adjustPopoverSize()}verifyInvalidDefaultColumns(){if(this.defaultColumns.length>0){const differenceList=[];if(this.defaultColumns.forEach((col=>{-1===this.columnsWhileOpening.map((e=>e.getColDef().field)).indexOf(col)&&differenceList.push(col)})),differenceList.length)throw new Error(`Default columns: [${differenceList.join(", ")}] are not available in columns list.`)}}onPopoverClose(){this.isSettingsApplied||this.isResetted||this.columnsWhileOpening.forEach(((column,index)=>{const field=column.getColDef().field;field&&(this.params.api.setColumnVisible(field,this.visbilityMap[field]),this.params.api.moveColumn(field,index))})),this.isSettingsApplied=this.isResetted=!1,this.setFocusInOnSettingsButton()}applySettings(){this.isSettingsApplied=!0,this.popover.close(),this.distributeColumnWidth()}distributeColumnWidth(){const row=document.querySelector(".ag-center-cols-container .ag-row"),viewport=document.querySelector(".ag-center-cols-viewport");if(row.offsetWidth<viewport.offsetWidth){const unPinnedCols=this.params.api.getAllDisplayedColumns().filter((col=>!1===col.isPinned())),emptySpace=viewport.offsetWidth-row.offsetWidth;let modulus=emptySpace%unPinnedCols.length;const extraWidthPerCol=(emptySpace-modulus)/unPinnedCols.length;unPinnedCols.forEach((col=>{const actualWidth=col.getActualWidth();this.params.api.setColumnWidth(col.getColId(),actualWidth+extraWidthPerCol+(modulus>0?1:0)),modulus--}))}}setColumnVisible(field,visible){const changedColumnIndex=this.colVisibilityChanges.findIndex((c=>c.field===field));if(changedColumnIndex>-1){const changedColumn=this.colVisibilityChanges.find((c=>c.field===field));this.colVisibilityChanges[changedColumnIndex]=Object.assign(changedColumn,{visible})}else this.colVisibilityChanges.push({field,visible});this.colVisibilityChanges.forEach((column=>{this.params.api.setColumnVisible(column.field,column.visible)}))}resetSettings(){for(this.isResetted=!0,this.popover.close();this.colVisibilityChanges.length>0;)this.colVisibilityChanges.pop();this.params.api.resetColumnState(),this.renderColumns(),this.setFocusInOnSettingsButton(),this.params.api.sizeColumnsToFit(),BnotkTableTheme.columnVisibilityReset()}moveColumn(direction,columnIndex,event){const column={...this.columnList[columnIndex]},newIndex="up"===direction?columnIndex-1:columnIndex+1;this.isMovingRow||(this.isMovingRow=!0,this.animateColumnMoving(column,direction,this.rowAnimationDuration,event,newIndex),setTimeout((()=>{this.columnList.splice(columnIndex,1),this.columnList.splice(newIndex,0,column);const currentIndex=this.params.api.getAllGridColumns().findIndex((col=>col.getColId()===column.field));this.params.api.moveColumn(column.field,"up"===direction?currentIndex-1:currentIndex+1),this.setSelectedSize(),this.isMovingRow=!1}),this.rowAnimationDuration))}animateColumnMoving(column,direction,duration,event,focusIndex){const columnSettingsRows=Array.from(document.querySelectorAll(".popover__row")),targetSettingRow=columnSettingsRows.find((row=>row.getAttribute("aria-label").includes(column.field)));"up"===direction?(targetSettingRow.classList.add("popover__row--moving-up"),targetSettingRow.previousElementSibling.classList.add("popover__row--moving-down"),targetSettingRow.classList.add("popover__row--moving-trigger")):(targetSettingRow.classList.add("popover__row--moving-down"),targetSettingRow.nextElementSibling.classList.add("popover__row--moving-up"),targetSettingRow.classList.add("popover__row--moving-trigger")),setTimeout((()=>{columnSettingsRows.forEach((row=>{row.classList.remove("popover__row--moving-up"),row.classList.remove("popover__row--moving-down"),row.classList.remove("popover__row--moving-trigger")})),this.setFocusAfterMove(event.target,focusIndex)}),duration)}setFocusAfterMove(target,newIndex){setTimeout((()=>{target?.closest("button");let iconName="name";newIndex===this.columnList.length-1&&"sortDescending"===iconName?iconName="sortAscending":0===newIndex&&"sortAscending"===iconName&&(iconName="sortDescending");const list=document.querySelectorAll(`[name="${iconName}"]`);list[newIndex]?.closest("button")?.focus()}))}resizeColumn(size,columnIndex){const column={...this.columnList[columnIndex]};let sizePX;size.match("S")?sizePX=128:size.match("M")?sizePX=250:size.match("L")&&(sizePX=500),this.params.api.setColumnWidth(column.field,sizePX),this.distributeColumnWidth()}checkColumnSize(size){return size>=128&&size<=249?"S":size>=250&&size<=499?"M":size>=500?"L":"Custom"}setSelectedSize(){this.params.api.getAllGridColumns().forEach((column=>{for(let index=0;index<this.columnList.length;index++){this.columnList[index].colId===column.getId()&&(this.selectedSizeColumn[index]=this.checkColumnSize(column.getActualWidth()))}}))}onKeyDown(event,columnIndex){let elements;const currentElement=event.target,container=document.querySelector("div[cdkTrapFocus]"),targetClass=currentElement.className.split(" ").find((element=>element.includes("control")));if(targetClass)elements=container.getElementsByClassName(targetClass);else{const iconName="dupa";elements=container.querySelectorAll(`[name="${iconName}"]`)}const down="ArrowDown"===event.code,up="ArrowUp"===event.code;(up||down)&&(event.preventDefault(),event.stopImmediatePropagation());(up&&columnIndex>0||down&&columnIndex<elements.length-1)&&(()=>{let nextElement,index=columnIndex;for(;!nextElement;){if(up&&index>0)index--;else{if(!(down&&index<elements.length-1))break;index++}nextElement=targetClass?elements[index].getAttributeNames().includes("disabled")?null:elements[index]:elements[index]?.closest("button")?.getAttributeNames().includes("disabled")?null:elements[index]?.closest("button")}nextElement?.focus()})()}static#_=this.propDecorators={settingsButton:[{type:core.ViewChild,args:["settingsButton"]}],popover:[{type:core.ViewChild,args:["p"]}],headerConfigTitle:[{type:core.Input}],standardFilter:[{type:core.Input}],resetFilter:[{type:core.Input}]}};AccessibleHeaderConfigComponent=(0,tslib_es6.gn)([(0,core.Component)({template:'<button\r\n  bnotkHandleEnter\r\n  #settingsButton\r\n  #p="ngbPopover"\r\n  autoClose="outside"\r\n  class="table__popover-controller"\r\n  popoverClass="table__popover"\r\n  [ngbPopover]="popoverContent"\r\n  (hidden)="onPopoverClose()"\r\n  placement="bottom-end"\r\n  container="body"\r\n  triggers="manual"\r\n  (click)="openPopover()"\r\n>\r\n  <i> "columnSetting" </i>\r\n</button>\r\n\r\n<ng-template #popoverContent>\r\n  <div\r\n    id="popoverContentId"\r\n    class="popover--advanced"\r\n    cdkTrapFocus\r\n    cdkTrapFocusAutoCapture\r\n  >\r\n    <div class="popover-scrollable-wrapper">\r\n      <div class="popover-list">\r\n        <div\r\n          class="popover__row"\r\n          role="group"\r\n          [attr.aria-label]="col.field"\r\n          *ngFor="let col of columnList; let columnIndex = index"\r\n        >\r\n          <span class="popover__row-title"> title of a column </span>\r\n          <div class="popover__row-options">\r\n            <div class="popover__checkbox">\r\n              <label\r\n                class="label--light m-0"\r\n                [for]="col.field"\r\n                [class.label--disabled]="isDefaultColumn(col.field)"\r\n              >\r\n                "translation.table.headerConfig.activeText"</label\r\n              >\r\n              <input\r\n                type="checkbox"\r\n                [id]="col.field"\r\n                [(ngModel)]="col.visible"\r\n                [disabled]="isDefaultColumn(col.field)"\r\n                (click)="setColumnVisible(col.field, !col.visible)"\r\n                (keydown)="onKeyDown($event, columnIndex)"\r\n                class="popover__checkbox-control"\r\n              />\r\n            </div>\r\n            <div\r\n              class="popover__position"\r\n              role="group"\r\n              aria-label="positionText"\r\n            >\r\n              <p>translation.table.headerConfig.positionText</p>\r\n              <div>\r\n                <button\r\n                  bnotkHandleEnter\r\n                  class="button--link"\r\n                  (keydown)="onKeyDown($event, columnIndex)"\r\n                  (click)="moveColumn(\'up\', columnIndex, $event)"\r\n                  [disabled]="columnIndex === 0"\r\n                >\r\n                  <i name="sortAscending"></i>\r\n                </button>\r\n                <button\r\n                  bnotkHandleEnter\r\n                  class="button--link"\r\n                  (keydown)="onKeyDown($event, columnIndex)"\r\n                  (click)="moveColumn(\'down\', columnIndex, $event)"\r\n                  [disabled]="columnIndex === columnList.length - 1"\r\n                >\r\n                  <i name="sortDescending"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div class="popover__size">\r\n              <label\r\n                class="label--light m-0"\r\n                [for]="\'size-config\' + columnIndex"\r\n                >translation.table.headerConfig.sizeText\r\n              </label>\r\n              <ng-select\r\n                [labelForId]="\'size-config\' + columnIndex"\r\n                [items]="sizingColumn"\r\n                class="ngs-theme-bnotk ngs-theme-bnotk--menu ngs-theme-bnotk--single ngs-theme-bnotk--small popover__size-control"\r\n                (change)="resizeColumn($event, columnIndex)"\r\n                placeholder=""\r\n                [searchable]="false"\r\n                [clearable]="false"\r\n                [(ngModel)]="selectedSizeColumn[columnIndex]"\r\n              >\r\n                <ng-template\r\n                  ng-option-tmp\r\n                  let-item="item"\r\n                  let-item$="item$"\r\n                  let-index="index"\r\n                >\r\n                  <div class="ngs-theme-bnotk__option">\r\n                    <p class="ngs-theme-bnotk__option-label">\r\n                      {{ item }}\r\n                    </p>\r\n                  </div>\r\n                </ng-template>\r\n              </ng-select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <ng-template #accessibleMenuTooltip>\r\n      <div>\r\n        <span>translation.table.headerConfig.infoTooltip</span>\r\n        <br />\r\n        <span> translation.table.headerConfig.infoTooltipHint</span>\r\n      </div>\r\n    </ng-template>\r\n    <div class="popover__buttons">\r\n      <button bnotkHandleEnter class="button--link">\r\n        <i name="info"></i>\r\n      </button>\r\n      <div class="popover__button-group">\r\n        <button\r\n          bnotkHandleEnter\r\n          class="button--secondary button--small"\r\n          (click)="resetSettings()"\r\n        >\r\n          Reset\r\n        </button>\r\n        <button\r\n          bnotkHandleEnter\r\n          class="button--primary button--small"\r\n          (click)="applySettings()"\r\n        >\r\n          apply\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n'})],AccessibleHeaderConfigComponent);const TABLE_DIRECTIVES=[AccessibleHeaderConfigComponent,HeaderConfigComponent,HeaderConfigMixinComponent,ClearFilterComponent];let TableModule=class TableModule{};TableModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:TABLE_DIRECTIVES,exports:[...TABLE_DIRECTIVES,ag_grid_angular.sF],imports:[common.CommonModule,ag_grid_angular.sF,fesm2022_forms.u5,PopoverModule,ButtonModule,ng_select_ng_select.A0]})],TableModule)}}]);